#include <stdio.h>
#include <stdlib.h>

struct node {
    struct node* left;
    int data;
    struct node* right;
};

struct node* tree = NULL;

void create_tree();
struct node* insertElement(struct node*, int);
void preorderTraversal(struct node*);
void inorderTraversal(struct node*);
void postorderTraversal(struct node*);
struct node* smallestElement(struct node*);
struct node* largestElement(struct node*);
struct node* deleteElement(struct node*, int);
void deleteTree(struct node*);
int totalNodes(struct node*);
int totalExternalNodes(struct node*);
int totalInternalNodes(struct node*);

int main() {
    int option, val;
    struct node* ptr;
    create_tree();

    do {
        printf("\n 1. Insert Element");
        printf("\n 2. Preorder Traversal");
        printf("\n 3. Inorder Traversal");
        printf("\n 4. Postorder Traversal");
        printf("\n 5. Find the smallest element");
        printf("\n 6. Find the largest element");
        printf("\n 7. Delete an element");
        printf("\n 8. Count the total number of nodes");
        printf("\n 9. Count the total number of external nodes");
        printf("\n 10. Count the total number of internal nodes");
        printf("\n 11. Delete the tree");
        printf("\n 12. Exit");

        printf("\n\n Enter your option : ");
        scanf("%d", &option);

        switch (option) {
            case 1:
                printf("\n Enter the value of the new node : ");
                scanf("%d", &val);
                tree = insertElement(tree, val);
                break;

            case 2:
                printf("\n The elements of the tree are : \n");
                preorderTraversal(tree);
                break;

            case 3:
                printf("\n The elements of the tree are : \n");
                inorderTraversal(tree);
                break;

            case 4:
                printf("\n The elements of the tree are : \n");
                postorderTraversal(tree);
                break;

            case 5:
                ptr = smallestElement(tree);
                if (ptr != NULL)
                    printf("\n Smallest element is : %d", ptr->data);
                else
                    printf("\n Tree is empty");
                break;

            case 6:
                ptr = largestElement(tree);
                if (ptr != NULL)
                    printf("\n Largest element is : %d", ptr->data);
                else
                    printf("\n Tree is empty");
                break;

            case 7:
                printf("\n Enter the element to be deleted : ");
                scanf("%d", &val);
                tree = deleteElement(tree, val);
                break;

            case 8:
                printf("\n Total no. of nodes = %d", totalNodes(tree));
                break;

            case 9:
                printf("\n Total no. of external nodes = %d", totalExternalNodes(tree));
                break;

            case 10:
                printf("\n Total no. of internal nodes = %d", totalInternalNodes(tree));
                break;

            case 11:
                deleteTree(tree);
                tree = NULL;
                printf("\n Tree deleted.");
                break;
        }
    } while (option != 12);

    return 0;
}

void create_tree() {
    // Initialize tree as empty
    tree = NULL;
}

struct node* insertElement(struct node* tree, int val) {
    struct node* ptr = (struct node*)malloc(sizeof(struct node));
    ptr->data = val;
    ptr->left = NULL;
    ptr->right = NULL;

    if (tree == NULL) {
        tree = ptr;
    } else {
        struct node* parentptr = NULL;
        struct node* nodeptr = tree;

        while (nodeptr != NULL) {
            parentptr = nodeptr;
            if (val < nodeptr->data) {
                nodeptr = nodeptr->left;
            } else {
                nodeptr = nodeptr->right;
            }
        }

        if (val < parentptr->data) {
            parentptr->left = ptr;
        } else {
            parentptr->right = ptr;
        }
    }
    return tree;
}

void preorderTraversal(struct node* tree) {
    if (tree != NULL) {
        printf("%d\t", tree->data);
        preorderTraversal(tree->left);
        preorderTraversal(tree->right);
    }
}

void inorderTraversal(struct node* tree) {
    if (tree != NULL) {
        inorderTraversal(tree->left);
        printf("%d\t", tree->data);
        inorderTraversal(tree->right);
    }
}

void postorderTraversal(struct node* tree) {
    if (tree != NULL) {
        postorderTraversal(tree->left);
        postorderTraversal(tree->right);
        printf("%d\t", tree->data);
    }
}

struct node* deleteElement(struct node* tree, int val) {
    struct node *current, *parent, *successor, *temp;
    
    // Check if the tree is initially empty.
    if (tree == NULL) {
        printf("\nTree is empty");
        return tree;
    }
    
    // Initialize pointers for traversal.
    parent = tree;
    current = tree;
    
    // Traverse the tree to find the node with the value 'val'.
    while (current != NULL && val != current->data) {
        parent = current;
        if (val < current->data) {
            current = current->left;
        } else {
            current = current->right;
        }
    }
    
    // If 'current' is NULL, 'val' was not found in the tree.
    if (current == NULL) {
        printf("\n The value to be deleted is not present in the tree");
        return tree;
    }
    
    // Determine the type of deletion:
    // 1. Node has no children (leaf node).
    // 2. Node has one child.
    // 3. Node has two children.
    
    if (current->left == NULL && current->right == NULL) {
        // Case 1: Node has no children (leaf node).
        // Simply remove 'current' from its parent.
        if (parent->left == current) {
            parent->left = NULL;
        } else {
            parent->right = NULL;
        }
        free(current); // Free the memory of the deleted node.
    } else if (current->left == NULL || current->right == NULL) {
        // Case 2: Node has one child.
        // Replace 'current' with its child.
        struct node* child = (current->left != NULL) ? current->left : current->right;
        if (parent->left == current) {
            parent->left = child;
        } else {
            parent->right = child;
        }
        free(current); // Free the memory of the deleted node.
    } else {
        // Case 3: Node has two children.
        // Find the in-order successor ('successor') of 'current' from its right subtree.
        parent = current;
        successor = current->right;
        while (successor->left != NULL) {
            parent = successor;
            successor = successor->left;
        }
        
        // Copy the data of the in-order successor to 'current'.
        current->data = successor->data;
        
        // Delete the in-order successor node.
        if (parent == current) {
            parent->right = successor->right;
        } else {
            parent->left = successor->right;
        }
        free(successor); // Free the memory of the deleted node.
    }
    
    return tree; // Return the updated tree.
}

void deleteTree(struct node* root) {
    if (root != NULL) {
        deleteTree(root->left);
        deleteTree(root->right);
        free(root);
    }
}

struct node* smallestElement(struct node* root) {
    if (root == NULL) {
        return NULL;
    }
    while (root->left != NULL) {
        root = root->left;
    }
    return root;
}

struct node* largestElement(struct node* root) {
    if (root == NULL) {
        return NULL;
    }
    while (root->right != NULL) {
        root = root->right;
    }
    return root;
}

int totalNodes(struct node* root) {
    if (root == NULL) {
        return 0;
    }
    return 1 + totalNodes(root->left) + totalNodes(root->right);
}

int totalExternalNodes(struct node* root) {
    if (root == NULL) {
        return 0;
    }
    if (root->left == NULL && root->right == NULL) {
        return 1;
    }
    return totalExternalNodes(root->left) + totalExternalNodes(root->right);
}

int totalInternalNodes(struct node* root) {
    if (root == NULL || (root->left == NULL && root->right == NULL)) {
        return 0;
    }
    return 1 + totalInternalNodes(root->left) + totalInternalNodes(root->right);
}
